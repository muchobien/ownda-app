type Account {
  color: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  transactions(
    after: String
    before: String
    first: Float
    last: Float
  ): TransactionConnection!
  updatedAt: DateTime!
}

type AccountConnection {
  edges: [AccountEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type AccountEdge {
  cursor: String!
  node: Account!
}

input AccountInput {
  color: String!
  name: String!
}

input AuthInput {
  email: String!
  hash: String!
  provider: Provider!
}

type Authenticated {
  credential: Credential!
  user: User!
}

type Category {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

input CategoryInput {
  name: String!
  parentId: String
}

type Credential {
  accessToken: String!
  refreshToken: String!
  tokenKind: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createAccount(input: AccountInput!): Account!
  createCategory(input: CategoryInput!): Category!
  createTransaction(input: TransactionInput!): Transaction!
  login(input: AuthInput!): Authenticated!
  refreshToken: Credential!
  register(input: AuthInput!): Authenticated!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum Provider {
  APPLE
  GOOGLE
  LOCAL
}

type Query {
  account(id: ID!): Account!
  accounts(
    after: String
    before: String
    first: Float
    last: Float
  ): AccountConnection!
  categories(
    after: String
    before: String
    first: Float
    last: Float
  ): CategoryConnection!
  category(id: ID!): Category!
  me: User!
  transaction(id: ID!): Transaction!
  transactions(
    after: String
    before: String
    first: Float
    last: Float
  ): TransactionConnection!
}

type Transaction {
  amount: Float!
  category: Category!
  categoryId: String!
  createdAt: DateTime!
  id: ID!
  kind: TransactionKind!
  name: String!
  updatedAt: DateTime!
}

type TransactionConnection {
  edges: [TransactionEdge!]!
  pageInfo: PageInfo!
  totalCount: Float!
}

type TransactionEdge {
  cursor: String!
  node: Transaction!
}

input TransactionInput {
  accountId: String!
  amount: Float!
  categoryId: String!
  kind: TransactionKind!
  name: String!
}

enum TransactionKind {
  EXPENSE
  INCOME
  TRANSFER
}

type User {
  accounts(
    after: String
    before: String
    first: Float
    last: Float
  ): AccountConnection!
  createdAt: DateTime!
  email: String!
  id: ID!
  updatedAt: DateTime!
}
